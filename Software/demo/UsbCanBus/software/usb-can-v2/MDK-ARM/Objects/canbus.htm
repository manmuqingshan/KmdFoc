<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\canbus.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\canbus.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon Sep 26 22:11:34 2022
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; kmd_foc_app_loop &rArr; kmd_app_run &rArr; kmd_motor_mode_run &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[37]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[37]">ADC0_1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1f]">BusFault_Handler</a> from gd32c10x_it.o(.text.BusFault_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3b]">CAN0_EWMC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[39]">CAN0_RX0_IRQHandler</a> from gd32c10x_it.o(.text.CAN0_RX0_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3a]">CAN0_RX1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[38]">CAN0_TX_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[63]">CAN1_EWMC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[61]">CAN1_RX0_IRQHandler</a> from gd32c10x_it.o(.text.CAN1_RX0_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[62]">CAN1_RX1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[60]">CAN1_TX_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[30]">DMA0_Channel0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[31]">DMA0_Channel1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[32]">DMA0_Channel2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[33]">DMA0_Channel3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[34]">DMA0_Channel4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[35]">DMA0_Channel5_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[36]">DMA0_Channel6_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[5b]">DMA1_Channel0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[5c]">DMA1_Channel1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[5d]">DMA1_Channel2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[5e]">DMA1_Channel3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[5f]">DMA1_Channel4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[22]">DebugMon_Handler</a> from gd32c10x_it.o(.text.DebugMon_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[54]">EXMC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2b]">EXTI0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[4d]">EXTI10_15_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2c]">EXTI1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2d]">EXTI2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2e]">EXTI3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2f]">EXTI4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3c]">EXTI5_9_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[29]">FMC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1d]">HardFault_Handler</a> from gd32c10x_it.o(.text.HardFault_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[45]">I2C0_ER_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[44]">I2C0_EV_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[47]">I2C1_ER_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[46]">I2C1_EV_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[26]">LVD_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1e]">MemManage_Handler</a> from gd32c10x_it.o(.text.MemManage_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1c]">NMI_Handler</a> from gd32c10x_it.o(.text.NMI_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[23]">PendSV_Handler</a> from gd32c10x_it.o(.text.PendSV_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[2a]">RCU_CTC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[4e]">RTC_Alarm_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[28]">RTC_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[1b]">Reset_Handler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[48]">SPI0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[49]">SPI1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[56]">SPI2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[21]">SVC_Handler</a> from gd32c10x_it.o(.text.SVC_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[24]">SysTick_Handler</a> from gd32c10x_it.o(.text.SysTick_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[66]">SystemInit</a> from system_gd32c10x.o(.text.SystemInit) referenced from startup_gd32c10x.o(.text)
 <LI><a href="#[27]">TAMPER_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3d]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[40]">TIMER0_Channel_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3f]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[3e]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[41]">TIMER1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[42]">TIMER2_IRQHandler</a> from gd32c10x_it.o(.text.TIMER2_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[43]">TIMER3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[55]">TIMER4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[59]">TIMER5_IRQHandler</a> from gd32c10x_it.o(.text.TIMER5_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[5a]">TIMER6_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[50]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[53]">TIMER7_Channel_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[52]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[51]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[57]">UART3_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[58]">UART4_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[4a]">USART0_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[4b]">USART1_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[4c]">USART2_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[64]">USBFS_IRQHandler</a> from gd32c10x_it.o(.text.USBFS_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[4f]">USBFS_WKUP_IRQHandler</a> from gd32c10x_it.o(.text.USBFS_WKUP_IRQHandler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[20]">UsageFault_Handler</a> from gd32c10x_it.o(.text.UsageFault_Handler) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[25]">WWDGT_IRQHandler</a> from startup_gd32c10x.o(.text) referenced from startup_gd32c10x.o(RESET)
 <LI><a href="#[67]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32c10x.o(.text)
 <LI><a href="#[69]">_usb_std_clearfeature</a> from usbd_enum.o(.text._usb_std_clearfeature) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[6f]">_usb_std_getconfiguration</a> from usbd_enum.o(.text._usb_std_getconfiguration) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[6d]">_usb_std_getdescriptor</a> from usbd_enum.o(.text._usb_std_getdescriptor) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[71]">_usb_std_getinterface</a> from usbd_enum.o(.text._usb_std_getinterface) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[68]">_usb_std_getstatus</a> from usbd_enum.o(.text._usb_std_getstatus) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[6a]">_usb_std_reserved</a> from usbd_enum.o(.text._usb_std_reserved) referenced 2 times from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[6c]">_usb_std_setaddress</a> from usbd_enum.o(.text._usb_std_setaddress) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[70]">_usb_std_setconfiguration</a> from usbd_enum.o(.text._usb_std_setconfiguration) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[6e]">_usb_std_setdescriptor</a> from usbd_enum.o(.text._usb_std_setdescriptor) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[6b]">_usb_std_setfeature</a> from usbd_enum.o(.text._usb_std_setfeature) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[72]">_usb_std_setinterface</a> from usbd_enum.o(.text._usb_std_setinterface) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[73]">_usb_std_synchframe</a> from usbd_enum.o(.text._usb_std_synchframe) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[1]">cdc_acm_deinit</a> from cdc_acm_core.o(.text.cdc_acm_deinit) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[4]">cdc_acm_in</a> from cdc_acm_core.o(.text.cdc_acm_in) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[0]">cdc_acm_init</a> from cdc_acm_core.o(.text.cdc_acm_init) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[5]">cdc_acm_out</a> from cdc_acm_core.o(.text.cdc_acm_out) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[2]">cdc_acm_req</a> from cdc_acm_core.o(.text.cdc_acm_req) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[3]">cdc_ctlx_out</a> from cdc_acm_core.o(.text.cdc_ctlx_out) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[6]">hal_kmd_disable_motor</a> from hal_kmd_foc.o(.text.hal_kmd_disable_motor) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[15]">hal_kmd_fsm_motor_cali_start</a> from hal_kmd_foc.o(.text.hal_kmd_fsm_motor_cali_start) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[16]">hal_kmd_fsm_motor_cali_stop</a> from hal_kmd_foc.o(.text.hal_kmd_fsm_motor_cali_stop) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[18]">hal_kmd_fsm_motor_configs_reset</a> from hal_kmd_foc.o(.text.hal_kmd_fsm_motor_configs_reset) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[17]">hal_kmd_fsm_motor_configs_updata</a> from hal_kmd_foc.o(.text.hal_kmd_fsm_motor_configs_updata) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[11]">hal_kmd_fsm_motor_disable</a> from hal_kmd_foc.o(.text.hal_kmd_fsm_motor_disable) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[12]">hal_kmd_fsm_motor_enable</a> from hal_kmd_foc.o(.text.hal_kmd_fsm_motor_enable) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[14]">hal_kmd_fsm_motor_get_state</a> from hal_kmd_foc.o(.text.hal_kmd_fsm_motor_get_state) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[13]">hal_kmd_fsm_motor_reset_error</a> from hal_kmd_foc.o(.text.hal_kmd_fsm_motor_reset_error) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[d]">hal_kmd_get_bus</a> from hal_kmd_foc.o(.text.hal_kmd_get_bus) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[c]">hal_kmd_get_current</a> from hal_kmd_foc.o(.text.hal_kmd_get_current) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[e]">hal_kmd_get_device_id_00_63</a> from hal_kmd_foc.o(.text.hal_kmd_get_device_id_00_63) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[f]">hal_kmd_get_device_id_64_95</a> from hal_kmd_foc.o(.text.hal_kmd_get_device_id_64_95) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[a]">hal_kmd_get_position</a> from hal_kmd_foc.o(.text.hal_kmd_get_position) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[b]">hal_kmd_get_velocity</a> from hal_kmd_foc.o(.text.hal_kmd_get_velocity) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[10]">hal_kmd_get_version</a> from hal_kmd_foc.o(.text.hal_kmd_get_version) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[9]">hal_kmd_set_current</a> from hal_kmd_foc.o(.text.hal_kmd_set_current) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[7]">hal_kmd_set_pisotion</a> from hal_kmd_foc.o(.text.hal_kmd_set_pisotion) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[8]">hal_kmd_set_velocity</a> from hal_kmd_foc.o(.text.hal_kmd_set_velocity) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[1a]">hal_kmd_user_config_get</a> from hal_kmd_foc.o(.text.hal_kmd_user_config_get) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[19]">hal_kmd_user_config_set</a> from hal_kmd_foc.o(.text.hal_kmd_user_config_set) referenced 2 times from hal_kmd_foc.o(.data.tHalKmdUser)
 <LI><a href="#[65]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[74]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[15c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[15d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[15e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[15f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32c10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_protocol
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_protocol
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_can_callback
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_message_pointer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_frame_pointer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_basic_init
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_run
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_run
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_dcmpge</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_run
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_run
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_run
</UL>

<P><STRONG><a name="[165]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[75]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[168]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[169]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[16a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[16b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CAN0_RX0_IRQHandler &rArr; bsp_can0_irq_callback &rArr; bsp_can_usb_transmit &rArr; bsp_usb_transmit &rArr; usb_data_transmit &rArr; usb_int_epin &rArr; usbd_in_transc &rArr; usbd_ctl_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; bsp_can1_irq_callback &rArr; kmd_interface_receive_callback &rArr; hal_kmd_frame_receive_callback &rArr; hal_kmd_user_config_receive_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DebugMon_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>Error_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[1d]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemManage_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PendSV_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SVC_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32c10x_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, system_gd32c10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER2_IRQHandler &rArr; usb_timer_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gd32c10x_it.o(.text.TIMER5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER5_IRQHandler &rArr; key_enc_scanf &rArr; key_task_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_enc_scanf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_get_tick_ms
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_get_ms_since
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USBFS_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.USBFS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBFS_IRQHandler &rArr; usbd_isr &rArr; usbd_int_epout &rArr; usbd_setup_transc &rArr; usbd_ctl_status_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vcp_auto_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.USBFS_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBFS_WKUP_IRQHandler &rArr; SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_active
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usb_clock_config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32c10x_it.o(.text.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsageFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32c10x.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>bsp_can0_init</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, bsp_can.o(.text.bsp_can0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_can0_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_filter_start_bank
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>bsp_can0_irq_callback</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, bsp_can.o(.text.bsp_can0_irq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsp_can0_irq_callback &rArr; bsp_can_usb_transmit &rArr; bsp_usb_transmit &rArr; usb_data_transmit &rArr; usb_int_epin &rArr; usbd_in_transc &rArr; usbd_ctl_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can_usb_transmit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>bsp_can0_receive</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, bsp_can.o(.text.bsp_can0_receive))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_irq_callback
</UL>

<P><STRONG><a name="[b6]"></a>bsp_can0_transmit</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, bsp_can.o(.text.bsp_can0_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_can0_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_states
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_can_transmit
</UL>

<P><STRONG><a name="[b8]"></a>bsp_can1_init</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, bsp_can.o(.text.bsp_can1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_can1_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_filter_start_bank
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>bsp_can1_irq_callback</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, bsp_can.o(.text.bsp_can1_irq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bsp_can1_irq_callback &rArr; kmd_interface_receive_callback &rArr; hal_kmd_frame_receive_callback &rArr; hal_kmd_user_config_receive_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_receive_callback
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>bsp_can1_receive</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, bsp_can.o(.text.bsp_can1_receive))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_irq_callback
</UL>

<P><STRONG><a name="[bb]"></a>bsp_can1_transmit</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, bsp_can.o(.text.bsp_can1_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_states
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can_can_transmit
</UL>

<P><STRONG><a name="[bc]"></a>bsp_can_can_transmit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_kmd.o(.text.bsp_can_can_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
</UL>

<P><STRONG><a name="[b5]"></a>bsp_can_usb_transmit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_kmd.o(.text.bsp_can_usb_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bsp_can_usb_transmit &rArr; bsp_usb_transmit &rArr; usb_data_transmit &rArr; usb_int_epin &rArr; usbd_in_transc &rArr; usbd_ctl_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_protocol
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_irq_callback
</UL>

<P><STRONG><a name="[bf]"></a>bsp_key_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsp_key.o(.text.bsp_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_key_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>bsp_kmd_usb_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.bsp_kmd_usb_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_kmd_usb_callback &rArr; bsp_usb_can_callback &rArr; parse_protocol &rArr; CRC16_Check_Sum &rArr; Get_CRC16_Check &rArr; crc_16 &rArr; init_crc16_tab
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_can_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vcp_auto_receive
</UL>

<P><STRONG><a name="[c2]"></a>bsp_led_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_led.o(.text.bsp_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_led_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>bsp_protocol_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_kmd.o(.text.bsp_protocol_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_protocol_init &rArr; init_protocol_pointer &rArr; init_crc16_tab
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_protocol_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>bsp_systick_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_systick.o(.text.bsp_systick_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_systick_delay_ms &rArr; bsp_systick_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_run
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_button_event
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_menu_button_event
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_get_config_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_kmd_work_mode
</UL>

<P><STRONG><a name="[c6]"></a>bsp_systick_delay_us</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp_systick.o(.text.bsp_systick_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_systick_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_delay_ms
</UL>

<P><STRONG><a name="[99]"></a>bsp_systick_get_ms_since</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_systick.o(.text.bsp_systick_get_ms_since))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>bsp_systick_get_tick_ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_systick.o(.text.bsp_systick_get_tick_ms))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>bsp_systick_init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, bsp_systick.o(.text.bsp_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_systick_init &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>bsp_timer5_init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, bsp_timer.o(.text.bsp_timer5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_timer5_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>bsp_usb_can_callback</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_kmd.o(.text.bsp_usb_can_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsp_usb_can_callback &rArr; parse_protocol &rArr; CRC16_Check_Sum &rArr; Get_CRC16_Check &rArr; crc_16 &rArr; init_crc16_tab
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_protocol
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_can_parse
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_kmd_usb_callback
</UL>

<P><STRONG><a name="[be]"></a>bsp_usb_transmit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.bsp_usb_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsp_usb_transmit &rArr; usb_data_transmit &rArr; usb_int_epin &rArr; usbd_in_transc &rArr; usbd_ctl_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can_usb_transmit
</UL>

<P><STRONG><a name="[b0]"></a>can1_filter_start_bank</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32c10x_can.o(.text.can1_filter_start_bank))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_init
</UL>

<P><STRONG><a name="[ae]"></a>can_deinit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32c10x_can.o(.text.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_init
</UL>

<P><STRONG><a name="[b1]"></a>can_filter_init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, gd32c10x_can.o(.text.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_init
</UL>

<P><STRONG><a name="[af]"></a>can_init</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, gd32c10x_can.o(.text.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_init
</UL>

<P><STRONG><a name="[b3]"></a>can_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32c10x_can.o(.text.can_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_init
</UL>

<P><STRONG><a name="[ad]"></a>can_struct_para_init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gd32c10x_can.o(.text.can_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_init
</UL>

<P><STRONG><a name="[b7]"></a>can_transmit_states</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gd32c10x_can.o(.text.can_transmit_states))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_transmit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_transmit
</UL>

<P><STRONG><a name="[8f]"></a>crc_16</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp_crc16.o(.text.crc_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = crc_16 &rArr; init_crc16_tab
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_crc16_tab
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check
</UL>

<P><STRONG><a name="[90]"></a>crc_8</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_crc8.o(.text.crc_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_8
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check
</UL>

<P><STRONG><a name="[128]"></a>exti_init</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, gd32c10x_exti.o(.text.exti_init))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
</UL>

<P><STRONG><a name="[129]"></a>exti_interrupt_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32c10x_exti.o(.text.exti_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
</UL>

<P><STRONG><a name="[a2]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32c10x_exti.o(.text.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>get_protocol_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_protocol.o(.text.get_protocol_size))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_message_pointer
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_protocol_pointer
</UL>

<P><STRONG><a name="[9a]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32c10x_gpio.o(.text.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>gpio_init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, gd32c10x_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_key_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_init
</UL>

<P><STRONG><a name="[fb]"></a>gpio_input_bit_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task_scan
</UL>

<P><STRONG><a name="[ab]"></a>gpio_pin_remap_config</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, gd32c10x_gpio.o(.text.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_init
</UL>

<P><STRONG><a name="[e2]"></a>hal_kmd_cali_receive_callback</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, hal_kmd_foc.o(.text.hal_kmd_cali_receive_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_kmd_cali_receive_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_parse_order_id
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_uint32
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_int
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_frame_receive_callback
</UL>

<P><STRONG><a name="[6]"></a>hal_kmd_disable_motor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hal_kmd_foc.o(.text.hal_kmd_disable_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_kmd_disable_motor &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[e9]"></a>hal_kmd_frame_receive_callback</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, hal_kmd_foc.o(.text.hal_kmd_frame_receive_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_kmd_frame_receive_callback &rArr; hal_kmd_user_config_receive_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_receive_callback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_motor_receive_callback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_cali_receive_callback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_motor_state
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_parse_frame_id
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_uint32
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_receive_callback
</UL>

<P><STRONG><a name="[d]"></a>hal_kmd_get_bus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_kmd_foc.o(.text.hal_kmd_get_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_kmd_get_bus &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[c]"></a>hal_kmd_get_current</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_kmd_foc.o(.text.hal_kmd_get_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_kmd_get_current &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[e]"></a>hal_kmd_get_device_id_00_63</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_kmd_foc.o(.text.hal_kmd_get_device_id_00_63))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_kmd_get_device_id_00_63 &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[f]"></a>hal_kmd_get_device_id_64_95</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_kmd_foc.o(.text.hal_kmd_get_device_id_64_95))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_kmd_get_device_id_64_95 &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[a]"></a>hal_kmd_get_position</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_kmd_foc.o(.text.hal_kmd_get_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_kmd_get_position &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[b]"></a>hal_kmd_get_velocity</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_kmd_foc.o(.text.hal_kmd_get_velocity))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_kmd_get_velocity &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[10]"></a>hal_kmd_get_version</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_kmd_foc.o(.text.hal_kmd_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_kmd_get_version &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[eb]"></a>hal_kmd_motor_receive_callback</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, hal_kmd_foc.o(.text.hal_kmd_motor_receive_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_kmd_motor_receive_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_motor_state
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_parse_order_id
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_uint32
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_frame_receive_callback
</UL>

<P><STRONG><a name="[9]"></a>hal_kmd_set_current</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_kmd_foc.o(.text.hal_kmd_set_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_kmd_set_current &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[7]"></a>hal_kmd_set_pisotion</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_kmd_foc.o(.text.hal_kmd_set_pisotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_kmd_set_pisotion &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[8]"></a>hal_kmd_set_velocity</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_kmd_foc.o(.text.hal_kmd_set_velocity))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_kmd_set_velocity &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[ec]"></a>hal_kmd_user_config_receive_callback</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hal_kmd_foc.o(.text.hal_kmd_user_config_receive_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_kmd_user_config_receive_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_parse_order_id
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_uint32
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_int
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_frame_receive_callback
</UL>

<P><STRONG><a name="[e1]"></a>init_crc16_tab</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bsp_crc16.o(.text.init_crc16_tab))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_crc16_tab
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_protocol_pointer
</UL>

<P><STRONG><a name="[c4]"></a>init_protocol_pointer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bsp_protocol.o(.text.init_protocol_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_protocol_pointer &rArr; init_crc16_tab
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_crc16_tab
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_protocol_size
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_message_pointer
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_frame_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_protocol_init
</UL>

<P><STRONG><a name="[111]"></a>int_to_unicode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_enum.o(.text.int_to_unicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_string_get
</UL>

<P><STRONG><a name="[98]"></a>key_enc_scanf</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, bsp_key.o(.text.key_enc_scanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = key_enc_scanf &rArr; key_task_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>key_task_scan</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_key.o(.text.key_task_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_task_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_enc_scanf
</UL>

<P><STRONG><a name="[fc]"></a>kmd_app_run</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, hal_kmd_app_demo.o(.text.kmd_app_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = kmd_app_run &rArr; kmd_motor_mode_run &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_run
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_check_motor_state
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_foc_app_loop
</UL>

<P><STRONG><a name="[ff]"></a>kmd_button_event</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_kmd_app_demo.o(.text.kmd_button_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = kmd_button_event &rArr; kmd_motor_mode_button_event &rArr; kmd_motor_menu_button_event &rArr; config_vel_integrator_gain &rArr; set_config_data
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_button_event
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_menu_button_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_check_motor_state
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_foc_app_loop
</UL>

<P><STRONG><a name="[104]"></a>kmd_foc_app_loop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_kmd_app_demo.o(.text.kmd_foc_app_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = kmd_foc_app_loop &rArr; kmd_app_run &rArr; kmd_motor_mode_run &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_button_event
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_app_run
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>kmd_interface_receive_callback</STRONG> (Thumb, 100 bytes, Stack size 88 bytes, hal_kmd_interface.o(.text.kmd_interface_receive_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = kmd_interface_receive_callback &rArr; hal_kmd_frame_receive_callback &rArr; hal_kmd_user_config_receive_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_frame_receive_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_irq_callback
</UL>

<P><STRONG><a name="[e8]"></a>kmd_interface_transmit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_kmd_interface.o(.text.kmd_interface_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can_can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_set_velocity
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_set_pisotion
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_set_current
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_version
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_velocity
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_position
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_device_id_64_95
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_device_id_00_63
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_current
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_bus
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_disable_motor
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_set
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_get
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_reset_error
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_get_state
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_enable
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_disable
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_configs_updata
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_configs_reset
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_cali_stop
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_cali_start
</UL>

<P><STRONG><a name="[101]"></a>kmd_motor_menu_button_event</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, hal_kmd_app_demo.o(.text.kmd_motor_menu_button_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = kmd_motor_menu_button_event &rArr; config_vel_integrator_gain &rArr; set_config_data
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_get_config_info
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_check_motor_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_check_motor_calib_valid
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vel_integrator_gain
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vel_gain
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_heartbeat_ms
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_heartbeat_ch
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_button_event
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_button_event
</UL>

<P><STRONG><a name="[100]"></a>kmd_motor_mode_button_event</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_kmd_app_demo.o(.text.kmd_motor_mode_button_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = kmd_motor_mode_button_event &rArr; kmd_motor_menu_button_event &rArr; config_vel_integrator_gain &rArr; set_config_data
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_menu_button_event
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_button_event
</UL>

<P><STRONG><a name="[fe]"></a>kmd_motor_mode_run</STRONG> (Thumb, 3792 bytes, Stack size 96 bytes, hal_kmd_app_demo.o(.text.kmd_motor_mode_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = kmd_motor_mode_run &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_velocity_limit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_kmd_work_mode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_current_limit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_delay_ms
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_app_run
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; kmd_foc_app_loop &rArr; kmd_app_run &rArr; kmd_motor_mode_run &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_foc_app_loop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer5_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_protocol_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_key_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rcu_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[bd]"></a>make_protocol</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bsp_protocol.o(.text.make_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = make_protocol &rArr; Get_CRC16_Check &rArr; crc_16 &rArr; init_crc16_tab
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can_usb_transmit
</UL>

<P><STRONG><a name="[b2]"></a>nvic_irq_enable</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gd32c10x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer5_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
</UL>

<P><STRONG><a name="[10b]"></a>nvic_priority_group_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32c10x_misc.o(.text.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[94]"></a>nvic_vector_table_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32c10x_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[cf]"></a>parse_protocol</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, bsp_protocol.o(.text.parse_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = parse_protocol &rArr; CRC16_Check_Sum &rArr; Get_CRC16_Check &rArr; crc_16 &rArr; init_crc16_tab
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_protocol_heade
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check_Sum
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_can_callback
</UL>

<P><STRONG><a name="[14b]"></a>pmu_to_deepsleepmode</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, gd32c10x_pmu.o(.text.pmu_to_deepsleepmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pmu_to_deepsleepmode
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_suspend
</UL>

<P><STRONG><a name="[12a]"></a>rcu_clock_freq_get</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, gd32c10x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rcu_config
</UL>

<P><STRONG><a name="[a0]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32c10x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer5_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_key_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rcu_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32c10x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[d3]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32c10x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[9f]"></a>rcu_usb_clock_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32c10x_rcu.o(.text.rcu_usb_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rcu_config
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>serial_string_get</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_enum.o(.text.serial_string_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serial_string_get &rArr; int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[f5]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_timer.o(.text.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>

<P><STRONG><a name="[c8]"></a>timer_deinit</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, gd32c10x_timer.o(.text.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer5_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_init
</UL>

<P><STRONG><a name="[f3]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_timer.o(.text.timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_irq
</UL>

<P><STRONG><a name="[cb]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_timer.o(.text.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer5_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>

<P><STRONG><a name="[ca]"></a>timer_init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, gd32c10x_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer5_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>

<P><STRONG><a name="[f4]"></a>timer_interrupt_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32c10x_timer.o(.text.timer_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>

<P><STRONG><a name="[cd]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32c10x_timer.o(.text.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer5_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>

<P><STRONG><a name="[97]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32c10x_timer.o(.text.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer5_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_irq
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32c10x_timer.o(.text.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_irq
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>timer_struct_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32c10x_timer.o(.text.timer_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_timer5_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_init
</UL>

<P><STRONG><a name="[115]"></a>usb_basic_init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, drv_usb_core.o(.text.usb_basic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_basic_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[116]"></a>usb_clear_txfifo</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, main.o(.text.usb_clear_txfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usb_clear_txfifo &rArr; usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_data_transmit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vcp_auto_receive
</UL>

<P><STRONG><a name="[a1]"></a>usb_clock_active</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_clock_active))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>usb_core_init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, drv_usb_core.o(.text.usb_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usb_core_init &rArr; usb_core_reset &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[127]"></a>usb_ctlep_startout</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_ctlep_startout))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_int_epin
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_send
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_recev
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_reset
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epout
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epin
</UL>

<P><STRONG><a name="[13e]"></a>usb_curmode_set</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_usb_core.o(.text.usb_curmode_set))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[d2]"></a>usb_data_transmit</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, main.o(.text.usb_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usb_data_transmit &rArr; usb_int_epin &rArr; usbd_in_transc &rArr; usbd_ctl_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_int_epin
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_txfifo
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_transmit
</UL>

<P><STRONG><a name="[11d]"></a>usb_devcore_init</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, drv_usb_dev.o(.text.usb_devcore_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usb_devcore_init &rArr; usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devint_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_rxfifo
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_txfifo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[121]"></a>usb_devint_enable</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_devint_enable))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[122]"></a>usb_emptytxfifo_write</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, main.o(.text.usb_emptytxfifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_emptytxfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_int_epin
</UL>

<P><STRONG><a name="[125]"></a>usb_iepintr_read</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_iepintr_read))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_int_epin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epin
</UL>

<P><STRONG><a name="[11c]"></a>usb_int_epin</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, main.o(.text.usb_int_epin))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usb_int_epin &rArr; usbd_in_transc &rArr; usbd_ctl_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_iepintr_read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_emptytxfifo_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_iepintnum_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_data_transmit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vcp_auto_receive
</UL>

<P><STRONG><a name="[10f]"></a>usb_intr_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gd32c10x_hw.o(.text.usb_intr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_intr_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_enable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>usb_mdelay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gd32c10x_hw.o(.text.usb_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_mdelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_disconnect
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_init
</UL>

<P><STRONG><a name="[10c]"></a>usb_rcu_config</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, gd32c10x_hw.o(.text.usb_rcu_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_rcu_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usb_clock_config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>usb_rxfifo_flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_usb_core.o(.text.usb_rxfifo_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_rxfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[149]"></a>usb_rxfifo_read</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_usb_core.o(.text.usb_rxfifo_read))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_rxfifo
</UL>

<P><STRONG><a name="[11f]"></a>usb_set_txfifo</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, drv_usb_core.o(.text.usb_set_txfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_set_txfifo
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[10d]"></a>usb_timer_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32c10x_hw.o(.text.usb_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_timer_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>usb_timer_irq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gd32c10x_hw.o(.text.usb_timer_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_timer_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>usb_transc_active</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, drv_usb_dev.o(.text.usb_transc_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_transc_active
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_setup
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_reset
</UL>

<P><STRONG><a name="[13c]"></a>usb_transc_clrstall</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_transc_clrstall))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall_clear
</UL>

<P><STRONG><a name="[138]"></a>usb_transc_deactivate</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_transc_deactivate))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear
</UL>

<P><STRONG><a name="[12b]"></a>usb_transc_inxfer</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, drv_usb_dev.o(.text.usb_transc_inxfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>

<P><STRONG><a name="[139]"></a>usb_transc_outxfer</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_usb_dev.o(.text.usb_transc_outxfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_transc_outxfer
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>

<P><STRONG><a name="[13b]"></a>usb_transc_stall</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_transc_stall))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>

<P><STRONG><a name="[117]"></a>usb_txfifo_flush</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_usb_core.o(.text.usb_txfifo_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_txfifo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_reset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[123]"></a>usb_txfifo_write</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, drv_usb_core.o(.text.usb_txfifo_write))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_emptytxfifo_write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_emptytxfifo_write
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_inxfer
</UL>

<P><STRONG><a name="[11b]"></a>usb_udelay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gd32c10x_hw.o(.text.usb_udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_flush
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_reset
</UL>

<P><STRONG><a name="[9e]"></a>usb_vcp_auto_receive</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, main.o(.text.usb_vcp_auto_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usb_vcp_auto_receive &rArr; bsp_kmd_usb_callback &rArr; bsp_usb_can_callback &rArr; parse_protocol &rArr; CRC16_Check_Sum &rArr; Get_CRC16_Check &rArr; crc_16 &rArr; init_crc16_tab
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_int_epin
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_txfifo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_kmd_usb_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>usbd_class_request</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_enum.o(.text.usbd_class_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_class_request
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
</UL>

<P><STRONG><a name="[12e]"></a>usbd_connect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_connect &rArr; usb_mdelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[130]"></a>usbd_ctl_recev</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_transc.o(.text.usbd_ctl_recev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ctl_recev &rArr; usbd_ep_recev &rArr; usb_transc_outxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transc
</UL>

<P><STRONG><a name="[131]"></a>usbd_ctl_send</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_transc.o(.text.usbd_ctl_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_ctl_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
</UL>

<P><STRONG><a name="[132]"></a>usbd_ctl_status_recev</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_transc.o(.text.usbd_ctl_status_recev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ctl_status_recev &rArr; usbd_ep_recev &rArr; usb_transc_outxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transc
</UL>

<P><STRONG><a name="[133]"></a>usbd_ctl_status_send</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_transc.o(.text.usbd_ctl_status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_ctl_status_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transc
</UL>

<P><STRONG><a name="[134]"></a>usbd_disconnect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_disconnect &rArr; usb_mdelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[137]"></a>usbd_enum_error</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_enum.o(.text.usbd_enum_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
</UL>

<P><STRONG><a name="[d5]"></a>usbd_ep_clear</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_deinit
</UL>

<P><STRONG><a name="[12c]"></a>usbd_ep_recev</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_recev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_recev &rArr; usb_transc_outxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_outxfer
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vcp_auto_receive
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_recev
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_recev
</UL>

<P><STRONG><a name="[d6]"></a>usbd_ep_send</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_inxfer
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_data_transmit
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_in
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_send
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_send
</UL>

<P><STRONG><a name="[d7]"></a>usbd_ep_setup</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ep_setup &rArr; usb_transc_active
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_active
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[a9]"></a>usbd_ep_stall</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_setfeature
</UL>

<P><STRONG><a name="[a3]"></a>usbd_ep_stall_clear</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_stall_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_stall_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_clrstall
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_clearfeature
</UL>

<P><STRONG><a name="[126]"></a>usbd_in_transc</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usbd_transc.o(.text.usbd_in_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_in_transc &rArr; usbd_ctl_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_recev
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_send
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_int_epin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epin
</UL>

<P><STRONG><a name="[10e]"></a>usbd_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = usbd_init &rArr; usb_devcore_init &rArr; usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_disconnect
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_string_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_globalint_enable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_globalint_disable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_curmode_set
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_basic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>usbd_isr</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, drv_usbd_int.o(.text.usbd_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = usbd_isr &rArr; usbd_int_epout &rArr; usbd_setup_transc &rArr; usbd_ctl_status_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_suspend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_rxfifo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_reset
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epout
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_enumfinish
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>usbd_out_transc</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, usbd_transc.o(.text.usbd_out_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_out_transc &rArr; usbd_ctl_status_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_send
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epout
</UL>

<P><STRONG><a name="[145]"></a>usbd_setup_transc</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usbd_transc.o(.text.usbd_setup_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_setup_transc &rArr; usbd_ctl_status_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_send
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_send
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_recev
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_vendor_request
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_request
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epout
</UL>

<P><STRONG><a name="[14d]"></a>usbd_standard_request</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_enum.o(.text.usbd_standard_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_standard_request
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
</UL>

<P><STRONG><a name="[14e]"></a>usbd_vendor_request</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_enum.o(.text.usbd_vendor_request))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
</UL>

<P><STRONG><a name="[158]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[107]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_run
</UL>

<P><STRONG><a name="[153]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[154]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[157]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[155]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[152]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[151]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[159]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[16e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[16f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[170]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[150]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[156]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f1]"></a>hw_delay</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32c10x_hw.o(.text.hw_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_udelay
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
</UL>

<P><STRONG><a name="[f2]"></a>hw_time_set</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gd32c10x_hw.o(.text.hw_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_disable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay
</UL>

<P><STRONG><a name="[8e]"></a>NVIC_SystemReset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(.text.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[124]"></a>usb_iepintnum_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.usb_iepintnum_read))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_int_epin
</UL>

<P><STRONG><a name="[d0]"></a>bsp_usb_can_parse</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bsp_kmd.o(.text.bsp_usb_can_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_usb_can_parse &rArr; bsp_usb_can_transmit &rArr; bsp_can0_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_can_callback
</UL>

<P><STRONG><a name="[d1]"></a>bsp_usb_can_transmit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_kmd.o(.text.bsp_usb_can_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_usb_can_transmit &rArr; bsp_can0_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can0_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usb_can_parse
</UL>

<P><STRONG><a name="[92]"></a>NVIC_SetPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_systick.o(.text.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_init
</UL>

<P><STRONG><a name="[91]"></a>SysTick_Config</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_systick.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_init
</UL>

<P><STRONG><a name="[e5]"></a>data_to_float</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_kmd_foc.o(.text.data_to_float))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_receive_callback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_motor_receive_callback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_frame_receive_callback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_cali_receive_callback
</UL>

<P><STRONG><a name="[e6]"></a>data_to_int</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_kmd_foc.o(.text.data_to_int))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_receive_callback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_cali_receive_callback
</UL>

<P><STRONG><a name="[e3]"></a>data_to_uint32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_kmd_foc.o(.text.data_to_uint32))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_receive_callback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_motor_receive_callback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_frame_receive_callback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_cali_receive_callback
</UL>

<P><STRONG><a name="[f0]"></a>float_to_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_kmd_foc.o(.text.float_to_data))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_set_velocity
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_set_pisotion
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_set_current
</UL>

<P><STRONG><a name="[15]"></a>hal_kmd_fsm_motor_cali_start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_kmd_foc.o(.text.hal_kmd_fsm_motor_cali_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_kmd_fsm_motor_cali_start &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_order_id
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[16]"></a>hal_kmd_fsm_motor_cali_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_kmd_foc.o(.text.hal_kmd_fsm_motor_cali_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_kmd_fsm_motor_cali_stop &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_order_id
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[18]"></a>hal_kmd_fsm_motor_configs_reset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_kmd_foc.o(.text.hal_kmd_fsm_motor_configs_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_kmd_fsm_motor_configs_reset &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_order_id
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[17]"></a>hal_kmd_fsm_motor_configs_updata</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_kmd_foc.o(.text.hal_kmd_fsm_motor_configs_updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_kmd_fsm_motor_configs_updata &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_order_id
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[11]"></a>hal_kmd_fsm_motor_disable</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hal_kmd_foc.o(.text.hal_kmd_fsm_motor_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_kmd_fsm_motor_disable &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_order_id
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[12]"></a>hal_kmd_fsm_motor_enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_kmd_foc.o(.text.hal_kmd_fsm_motor_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_kmd_fsm_motor_enable &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_order_id
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[14]"></a>hal_kmd_fsm_motor_get_state</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_kmd_foc.o(.text.hal_kmd_fsm_motor_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_kmd_fsm_motor_get_state &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_order_id
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[13]"></a>hal_kmd_fsm_motor_reset_error</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_kmd_foc.o(.text.hal_kmd_fsm_motor_reset_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_kmd_fsm_motor_reset_error &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_order_id
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[1a]"></a>hal_kmd_user_config_get</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hal_kmd_foc.o(.text.hal_kmd_user_config_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_kmd_user_config_get &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_order_id
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[19]"></a>hal_kmd_user_config_set</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hal_kmd_foc.o(.text.hal_kmd_user_config_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_kmd_user_config_set &rArr; kmd_interface_transmit &rArr; bsp_can_can_transmit &rArr; bsp_can1_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_interface_transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_order_id
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_make_frame_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_kmd_foc.o(.data.tHalKmdUser)
</UL>
<P><STRONG><a name="[e7]"></a>hal_make_frame_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_kmd_foc.o(.text.hal_make_frame_id))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_set_velocity
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_set_pisotion
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_set_current
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_version
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_velocity
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_position
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_device_id_64_95
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_device_id_00_63
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_current
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_get_bus
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_disable_motor
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_set
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_get
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_reset_error
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_get_state
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_enable
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_disable
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_configs_updata
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_configs_reset
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_cali_stop
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_cali_start
</UL>

<P><STRONG><a name="[ee]"></a>hal_make_order_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_kmd_foc.o(.text.hal_make_order_id))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_set
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_get
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_reset_error
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_get_state
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_enable
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_disable
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_configs_updata
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_configs_reset
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_cali_stop
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_cali_start
</UL>

<P><STRONG><a name="[ea]"></a>hal_parse_frame_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_kmd_foc.o(.text.hal_parse_frame_id))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_frame_receive_callback
</UL>

<P><STRONG><a name="[e4]"></a>hal_parse_order_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_kmd_foc.o(.text.hal_parse_order_id))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_receive_callback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_motor_receive_callback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_cali_receive_callback
</UL>

<P><STRONG><a name="[ed]"></a>parse_motor_state</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_kmd_foc.o(.text.parse_motor_state))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_motor_receive_callback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_frame_receive_callback
</UL>

<P><STRONG><a name="[ef]"></a>uint32_to_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_kmd_foc.o(.text.uint32_to_data))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_set
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_user_config_get
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_reset_error
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_get_state
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_enable
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_disable
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_configs_updata
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_configs_reset
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_cali_stop
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_kmd_fsm_motor_cali_start
</UL>

<P><STRONG><a name="[d9]"></a>config_current_limit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_kmd_app_demo.o(.text.config_current_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = config_current_limit &rArr; set_config_data
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_data
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_run
</UL>

<P><STRONG><a name="[db]"></a>config_heartbeat_ch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_kmd_app_demo.o(.text.config_heartbeat_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = config_heartbeat_ch &rArr; set_config_data
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_data
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_menu_button_event
</UL>

<P><STRONG><a name="[dc]"></a>config_heartbeat_ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_kmd_app_demo.o(.text.config_heartbeat_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = config_heartbeat_ms &rArr; set_config_data
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_data
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_menu_button_event
</UL>

<P><STRONG><a name="[dd]"></a>config_kmd_work_mode</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, hal_kmd_app_demo.o(.text.config_kmd_work_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = config_kmd_work_mode &rArr; set_config_data
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_data
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_run
</UL>

<P><STRONG><a name="[de]"></a>config_vel_gain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_kmd_app_demo.o(.text.config_vel_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = config_vel_gain &rArr; set_config_data
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_data
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_menu_button_event
</UL>

<P><STRONG><a name="[df]"></a>config_vel_integrator_gain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_kmd_app_demo.o(.text.config_vel_integrator_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = config_vel_integrator_gain &rArr; set_config_data
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_data
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_menu_button_event
</UL>

<P><STRONG><a name="[e0]"></a>config_velocity_limit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_kmd_app_demo.o(.text.config_velocity_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = config_velocity_limit &rArr; set_config_data
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_data
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_mode_run
</UL>

<P><STRONG><a name="[113]"></a>float_to_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_kmd_app_demo.o(.text.float_to_data))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_data
</UL>

<P><STRONG><a name="[103]"></a>get_config_data</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, hal_kmd_app_demo.o(.text.get_config_data))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_check_motor_calib_valid
</UL>

<P><STRONG><a name="[112]"></a>int_to_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_kmd_app_demo.o(.text.int_to_data))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_data
</UL>

<P><STRONG><a name="[102]"></a>kmd_check_motor_calib_valid</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_kmd_app_demo.o(.text.kmd_check_motor_calib_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kmd_check_motor_calib_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config_data
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_menu_button_event
</UL>

<P><STRONG><a name="[fd]"></a>kmd_check_motor_state</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_kmd_app_demo.o(.text.kmd_check_motor_state))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_menu_button_event
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_button_event
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_app_run
</UL>

<P><STRONG><a name="[105]"></a>kmd_get_config_info</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, hal_kmd_app_demo.o(.text.kmd_get_config_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kmd_get_config_info &rArr; bsp_systick_delay_ms &rArr; bsp_systick_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmd_motor_menu_button_event
</UL>

<P><STRONG><a name="[da]"></a>set_config_data</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, hal_kmd_app_demo.o(.text.set_config_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_config_data
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_data
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_velocity_limit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vel_integrator_gain
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_vel_gain
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_kmd_work_mode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_heartbeat_ms
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_heartbeat_ch
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_current_limit
</UL>

<P><STRONG><a name="[8a]"></a>CRC16_Check_Sum</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_protocol.o(.text.CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CRC16_Check_Sum &rArr; Get_CRC16_Check &rArr; crc_16 &rArr; init_crc16_tab
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_protocol
</UL>

<P><STRONG><a name="[8c]"></a>CRC8_Check_Sum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_protocol.o(.text.CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRC8_Check_Sum &rArr; Get_CRC8_Check &rArr; crc_8
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_protocol_heade
</UL>

<P><STRONG><a name="[8b]"></a>Get_CRC16_Check</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_protocol.o(.text.Get_CRC16_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_CRC16_Check &rArr; crc_16 &rArr; init_crc16_tab
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_16
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Check_Sum
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_protocol
</UL>

<P><STRONG><a name="[8d]"></a>Get_CRC8_Check</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_protocol.o(.text.Get_CRC8_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_CRC8_Check &rArr; crc_8
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_8
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8_Check_Sum
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_protocol
</UL>

<P><STRONG><a name="[d8]"></a>check_protocol_heade</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_protocol.o(.text.check_protocol_heade))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_protocol_heade &rArr; CRC8_Check_Sum &rArr; Get_CRC8_Check &rArr; crc_8
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_protocol
</UL>

<P><STRONG><a name="[f6]"></a>init_frame_pointer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_protocol.o(.text.init_frame_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_frame_pointer
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_protocol_pointer
</UL>

<P><STRONG><a name="[f8]"></a>init_message_pointer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_protocol.o(.text.init_message_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_message_pointer
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_protocol_size
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_protocol_pointer
</UL>

<P><STRONG><a name="[114]"></a>system_clock_120m_hxtal</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, system_gd32c10x.o(.text.system_clock_120m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[93]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32c10x.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_120m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[119]"></a>usb_core_reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_usb_core.o(.text.usb_core_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_core_reset &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_init
</UL>

<P><STRONG><a name="[11e]"></a>usb_set_rxfifo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_set_rxfifo))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[141]"></a>usb_iepintnum_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_usbd_int.o(.text.usb_iepintnum_read))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epin
</UL>

<P><STRONG><a name="[143]"></a>usb_oepintnum_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_usbd_int.o(.text.usb_oepintnum_read))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epout
</UL>

<P><STRONG><a name="[144]"></a>usb_oepintr_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_usbd_int.o(.text.usb_oepintr_read))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epout
</UL>

<P><STRONG><a name="[136]"></a>usbd_emptytxfifo_write</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, drv_usbd_int.o(.text.usbd_emptytxfifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_emptytxfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epin
</UL>

<P><STRONG><a name="[14c]"></a>usbd_int_enumfinish</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, drv_usbd_int.o(.text.usbd_int_enumfinish))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[140]"></a>usbd_int_epin</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, drv_usbd_int.o(.text.usbd_int_epin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbd_int_epin &rArr; usbd_in_transc &rArr; usbd_ctl_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_iepintr_read
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_emptytxfifo_write
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_iepintnum_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[142]"></a>usbd_int_epout</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, drv_usbd_int.o(.text.usbd_int_epout))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usbd_int_epout &rArr; usbd_setup_transc &rArr; usbd_ctl_status_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_oepintr_read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_oepintnum_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[147]"></a>usbd_int_reset</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, drv_usbd_int.o(.text.usbd_int_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usbd_int_reset &rArr; usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_active
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[148]"></a>usbd_int_rxfifo</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, drv_usbd_int.o(.text.usbd_int_rxfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_int_rxfifo
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[14a]"></a>usbd_int_suspend</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, drv_usbd_int.o(.text.usbd_int_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_int_suspend &rArr; pmu_to_deepsleepmode
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_to_deepsleepmode
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[12f]"></a>usb_dev_connect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(.text.usb_dev_connect))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
</UL>

<P><STRONG><a name="[135]"></a>usb_dev_disconnect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(.text.usb_dev_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_disconnect
</UL>

<P><STRONG><a name="[13d]"></a>usb_globalint_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(.text.usb_globalint_disable))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[13f]"></a>usb_globalint_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(.text.usb_globalint_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[a7]"></a>_usb_bos_desc_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_bos_desc_get))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getdescriptor
</UL>

<P><STRONG><a name="[a6]"></a>_usb_config_desc_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_config_desc_get))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getdescriptor
</UL>

<P><STRONG><a name="[a4]"></a>_usb_dev_desc_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_dev_desc_get))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getdescriptor
</UL>

<P><STRONG><a name="[69]"></a>_usb_std_clearfeature</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_clearfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _usb_std_clearfeature &rArr; usbd_ep_stall_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[6f]"></a>_usb_std_getconfiguration</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_getconfiguration))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[6d]"></a>_usb_std_getdescriptor</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_getdescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_getdescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_str_desc_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_dev_desc_get
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_config_desc_get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_bos_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[71]"></a>_usb_std_getinterface</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_getinterface))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[68]"></a>_usb_std_getstatus</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_getstatus))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[6a]"></a>_usb_std_reserved</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_reserved))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[6c]"></a>_usb_std_setaddress</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_setaddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_setaddress &rArr; usbd_addr_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_addr_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[70]"></a>_usb_std_setconfiguration</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_setconfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_setconfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[6e]"></a>_usb_std_setdescriptor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_setdescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[6b]"></a>_usb_std_setfeature</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_setfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_setfeature &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[72]"></a>_usb_std_setinterface</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_setinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _usb_std_setinterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[73]"></a>_usb_std_synchframe</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_synchframe))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[a5]"></a>_usb_str_desc_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_str_desc_get))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getdescriptor
</UL>

<P><STRONG><a name="[12d]"></a>usb_devaddr_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_enum.o(.text.usb_devaddr_set))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_addr_set
</UL>

<P><STRONG><a name="[a8]"></a>usbd_addr_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_enum.o(.text.usbd_addr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_addr_set
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devaddr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_setaddress
</UL>

<P><STRONG><a name="[1]"></a>cdc_acm_deinit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cdc_acm_core.o(.text.cdc_acm_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cdc_acm_deinit &rArr; usbd_ep_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[4]"></a>cdc_acm_in</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, cdc_acm_core.o(.text.cdc_acm_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cdc_acm_in &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[0]"></a>cdc_acm_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cdc_acm_core.o(.text.cdc_acm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cdc_acm_init &rArr; usbd_ep_setup &rArr; usb_transc_active
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[5]"></a>cdc_acm_out</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cdc_acm_core.o(.text.cdc_acm_out))
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[2]"></a>cdc_acm_req</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, cdc_acm_core.o(.text.cdc_acm_req))
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[3]"></a>cdc_ctlx_out</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cdc_acm_core.o(.text.cdc_ctlx_out))
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
