/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "imu_task.h"
#include "led_task.h"
#include "music_task.h"
#include "key_task.h"
#include "kmd_foc_task.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
extern SPI_HandleTypeDef hspi2;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void vTestTask(void const * argument);
void ICM42688_NS_L(void)
{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
}
void ICM42688_NS_H(void)
{
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
}

uint8_t ICM42688_Read_Write_Byte(uint8_t txdata)
{
	
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi2, &txdata, &rx_data, 1, 1000);
    return rx_data;
}


void ICM42688_Write_Single_Reg(uint8_t reg, uint8_t data)
{
	ICM42688_NS_L();
    ICM42688_Read_Write_Byte(reg);
    ICM42688_Read_Write_Byte(data);
	ICM42688_NS_H();
}
void ICM42688_Write_Muli_Reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
	    ICM42688_NS_L();
    ICM42688_Read_Write_Byte(reg);
    while (len != 0)
        {
            ICM42688_Read_Write_Byte(*buf);
            buf++;
            len--;
        }
			ICM42688_NS_H();
}
void ICM42688_Read_Single_Reg(uint8_t reg, uint8_t *return_data)
{
	    ICM42688_NS_L();
    ICM42688_Read_Write_Byte(reg | 0x80);
    *return_data = ICM42688_Read_Write_Byte(0);
		ICM42688_NS_H();
}
void ICM42688_Read_Muli_Reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
	    ICM42688_NS_L();
    ICM42688_Read_Write_Byte(reg | 0x80);

    while (len != 0)
        {
            *buf = ICM42688_Read_Write_Byte(0);
            buf++;
            len--;
        }
			ICM42688_NS_H();
}


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
osThreadId defaultTaskHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void const * argument);

extern void MX_USB_DEVICE_Init(void);
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* GetTimerTaskMemory prototype (linked to static allocation support) */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize );

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    /* place for user code */
}
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
    *ppxTimerTaskStackBuffer = &xTimerStack[0];
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    /* place for user code */
}
/* USER CODE END GET_TIMER_TASK_MEMORY */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* USER CODE BEGIN RTOS_MUTEX */
    /* add mutexes, ... */
    /* USER CODE END RTOS_MUTEX */

    /* USER CODE BEGIN RTOS_SEMAPHORES */
    /* add semaphores, ... */
    /* USER CODE END RTOS_SEMAPHORES */

    /* USER CODE BEGIN RTOS_TIMERS */
    /* start timers, add new ones, ... */
    /* USER CODE END RTOS_TIMERS */

    /* USER CODE BEGIN RTOS_QUEUES */
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    imu_task_creat();
    led_task_creat();
    music_task_creat();
    key_task_creat();
    kmd_foc_task_creat();

    osThreadDef(testTask, vTestTask, osPriorityNormal, 0, 256);
    defaultTaskHandle = osThreadCreate(osThread(testTask), NULL);
    /* USER CODE END RTOS_THREADS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
    /* init code for USB_DEVICE */
    MX_USB_DEVICE_Init();
    /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
    for(;;)
        {
            osDelay(1);
        }
    /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
uint8_t reg_val;
uint8_t chipID;
uint8_t pData[10];
void vTestTask(void const * argument)
{
    ICM42688_NS_L();
    ICM42688_Write_Single_Reg(0x76,0);
    ICM42688_NS_H();
    ICM42688_NS_L();
    ICM42688_Write_Single_Reg(0x11,1);
    ICM42688_NS_H();
    ICM42688_NS_L();
    ICM42688_Write_Single_Reg(0x76,0);
    ICM42688_NS_H();
    osDelay(100);
    ICM42688_NS_L();
    ICM42688_Read_Single_Reg(0x75,&chipID);
    ICM42688_NS_H();

	
//    ICM42688_NS_L();
//    ICM42688_Write_Single_Reg(0x76,0x04);
//    ICM42688_NS_H();
//    ICM42688_NS_L();
//    ICM42688_Write_Single_Reg(0x10, 0x0d);
//    ICM42688_NS_H();
//    ICM42688_NS_L();
//    ICM42688_Write_Single_Reg(0x12, 0x01);
//    ICM42688_NS_H();


//    ICM42688_NS_L();
//    ICM42688_Write_Single_Reg(0x76,0x00);
//    ICM42688_NS_H();
//    ICM42688_NS_L();
	
	
	//PWR_MGMT0     0x4E
    ICM42688_Read_Single_Reg(0x4E, &reg_val);
    ICM42688_NS_L();
    ICM42688_Write_Single_Reg(0x4E, reg_val|0X0F);
    ICM42688_NS_H();

	//GYRO_CONFIG0  0x4F
	ICM42688_NS_L();
    ICM42688_Read_Single_Reg(0x4F, &reg_val);
    ICM42688_NS_H();	
    ICM42688_NS_L();
    ICM42688_Write_Single_Reg(0x4F, reg_val|0X06);
    ICM42688_NS_H();
	
	//ACCEL_CONFIG0 0x50
	ICM42688_NS_L();
    ICM42688_Read_Single_Reg(0x50, &reg_val);
    ICM42688_NS_H();	
    ICM42688_NS_L();
    ICM42688_Write_Single_Reg(0x50, reg_val|0X06);
    ICM42688_NS_H();
	
	
    for(;;)
        {
            ICM42688_NS_L();
            ICM42688_Read_Single_Reg(0x1F,&pData[0]);
            ICM42688_NS_H();
            ICM42688_NS_L();
            ICM42688_Read_Single_Reg(0x20,&pData[1]);
            ICM42688_NS_H();
            ICM42688_NS_L();
            ICM42688_Read_Single_Reg(0x21,&pData[2]);
            ICM42688_NS_H();
            ICM42688_NS_L();
            ICM42688_Read_Single_Reg(0x22,&pData[3]);
            ICM42688_NS_H();
            osDelay(50);
        }
}
/* USER CODE END Application */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
